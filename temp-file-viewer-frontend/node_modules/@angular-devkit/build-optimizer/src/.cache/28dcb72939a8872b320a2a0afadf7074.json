{"remainingRequest":"/Users/liuyingjun/tool/cover/temp-file-viewer/temp-file-viewer-frontend/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/liuyingjun/tool/cover/temp-file-viewer/temp-file-viewer-frontend/node_modules/ngx-markdown/fesm5/ngx-markdown.js","dependencies":[{"path":"/Users/liuyingjun/tool/cover/temp-file-viewer/temp-file-viewer-frontend/node_modules/ngx-markdown/fesm5/ngx-markdown.js","mtime":1539303766000},{"path":"/Users/liuyingjun/tool/cover/temp-file-viewer/temp-file-viewer-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1603415226361},{"path":"/Users/liuyingjun/tool/cover/temp-file-viewer/temp-file-viewer-frontend/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core,_angular_common_http,_angular_platform_browser,marked,rxjs_operators,tslib PURE_IMPORTS_END */\nimport { Pipe, Injectable, Optional, SecurityContext, Component, ElementRef, EventEmitter, Input, Output, NgZone, NgModule } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { parse, Renderer } from 'marked';\nimport { map, first } from 'rxjs/operators';\nimport { __spread, __extends } from 'tslib';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar LanguagePipe = /** @class */ /*@__PURE__*/ (function () {\n    function LanguagePipe() {\n    }\n    /**\n     * @param {?} value\n     * @param {?} language\n     * @return {?}\n     */\n    LanguagePipe.prototype.transform = /**\n     * @param {?} value\n     * @param {?} language\n     * @return {?}\n     */\n        function (value, language) {\n            if (typeof value !== 'string') {\n                console.error(\"LanguagePipe has been invoked with an invalid value type [\" + value + \"]\");\n                return value;\n            }\n            if (typeof language !== 'string') {\n                console.error(\"LanguagePipe has been invoked with an invalid parameter [\" + language + \"]\");\n                return value;\n            }\n            return '```' + language + '\\n' + value + '\\n```';\n        };\n    return LanguagePipe;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar MarkedOptions = /** @class */ /*@__PURE__*/ (function () {\n    function MarkedOptions() {\n    }\n    return MarkedOptions;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar errorSrcWithoutHttpClient = '[ngx-markdown] When using the [src] attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information';\nvar MarkdownService = /** @class */ /*@__PURE__*/ (function () {\n    function MarkdownService(http, domSanitizer, options) {\n        this.http = http;\n        this.domSanitizer = domSanitizer;\n        this.options = options;\n        if (!this.renderer) {\n            this.renderer = new Renderer();\n        }\n    }\n    Object.defineProperty(MarkdownService.prototype, \"renderer\", {\n        get: /**\n         * @return {?}\n         */ function () { return this.options.renderer; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this.options.renderer = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} markdown\n     * @param {?=} decodeHtml\n     * @param {?=} markedOptions\n     * @return {?}\n     */\n    MarkdownService.prototype.compile = /**\n     * @param {?} markdown\n     * @param {?=} decodeHtml\n     * @param {?=} markedOptions\n     * @return {?}\n     */\n        function (markdown, decodeHtml, markedOptions) {\n            if (decodeHtml === void 0) {\n                decodeHtml = false;\n            }\n            if (markedOptions === void 0) {\n                markedOptions = this.options;\n            }\n            /** @type {?} */\n            var precompiled = this.precompile(markdown);\n            /** @type {?} */\n            var compiled = parse(decodeHtml ? this.decodeHtml(precompiled) : precompiled, markedOptions);\n            return markedOptions.sanitize && !markedOptions.sanitizer\n                ? this.domSanitizer.sanitize(SecurityContext.HTML, compiled)\n                : compiled;\n        };\n    /**\n     * @param {?} src\n     * @return {?}\n     */\n    MarkdownService.prototype.getSource = /**\n     * @param {?} src\n     * @return {?}\n     */\n        function (src) {\n            var _this = this;\n            if (!this.http) {\n                throw new Error(errorSrcWithoutHttpClient);\n            }\n            return this.http\n                .get(src, { responseType: 'text' })\n                .pipe(map(function (markdown) { return _this.handleExtension(src, markdown); }));\n        };\n    /**\n     * @return {?}\n     */\n    MarkdownService.prototype.highlight = /**\n     * @return {?}\n     */\n        function () {\n            if (typeof Prism !== 'undefined') {\n                Prism.highlightAll(false);\n            }\n        };\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    MarkdownService.prototype.decodeHtml = /**\n     * @param {?} html\n     * @return {?}\n     */\n        function (html) {\n            /** @type {?} */\n            var textarea = document.createElement('textarea');\n            textarea.innerHTML = html;\n            return textarea.value;\n        };\n    /**\n     * @param {?} src\n     * @param {?} markdown\n     * @return {?}\n     */\n    MarkdownService.prototype.handleExtension = /**\n     * @param {?} src\n     * @param {?} markdown\n     * @return {?}\n     */\n        function (src, markdown) {\n            /** @type {?} */\n            var extension = src\n                ? src.split('.').splice(-1).join()\n                : null;\n            return extension !== 'md'\n                ? '```' + extension + '\\n' + markdown + '\\n```'\n                : markdown;\n        };\n    /**\n     * @param {?} markdown\n     * @return {?}\n     */\n    MarkdownService.prototype.precompile = /**\n     * @param {?} markdown\n     * @return {?}\n     */\n        function (markdown) {\n            if (!markdown) {\n                return '';\n            }\n            /** @type {?} */\n            var indentStart;\n            return markdown\n                .split('\\n')\n                .map(function (line) {\n                /** @type {?} */\n                var lineIdentStart = indentStart;\n                // find position of 1st non-whitespace character\n                // to determine the current line indentation start\n                if (line.length > 0) {\n                    lineIdentStart = isNaN(lineIdentStart)\n                        ? line.search(/\\S|$/)\n                        : Math.min(line.search(/\\S|$/), lineIdentStart);\n                }\n                // keep 1st non-whitespace line indentation\n                // as base reference for other lines\n                if (isNaN(indentStart)) {\n                    indentStart = lineIdentStart;\n                }\n                // remove whitespaces before current line indentation\n                return !!lineIdentStart\n                    ? line.substring(lineIdentStart)\n                    : line;\n            }).join('\\n');\n        };\n    return MarkdownService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar MarkdownComponent = /** @class */ /*@__PURE__*/ (function () {\n    function MarkdownComponent(element, markdownService) {\n        this.element = element;\n        this.markdownService = markdownService;\n        this.error = new EventEmitter();\n        this.load = new EventEmitter();\n    }\n    Object.defineProperty(MarkdownComponent.prototype, \"_isTranscluded\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return !this._data && !this._src;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MarkdownComponent.prototype, \"data\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._data; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._data = value;\n            this.render(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MarkdownComponent.prototype, \"src\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._src; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            var _this = this;\n            this._src = value;\n            this.markdownService\n                .getSource(value)\n                .subscribe(function (markdown) {\n                _this.render(markdown);\n                _this.load.emit(markdown);\n            }, function (error) { return _this.error.emit(error); });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MarkdownComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this._isTranscluded) {\n                this.render(this.element.nativeElement.innerHTML, true);\n            }\n        };\n    /**\n     * @param {?} markdown\n     * @param {?=} decodeHtml\n     * @return {?}\n     */\n    MarkdownComponent.prototype.render = /**\n     * @param {?} markdown\n     * @param {?=} decodeHtml\n     * @return {?}\n     */\n        function (markdown, decodeHtml) {\n            if (decodeHtml === void 0) {\n                decodeHtml = false;\n            }\n            this.element.nativeElement.innerHTML = this.markdownService.compile(markdown, decodeHtml);\n            this.markdownService.highlight();\n        };\n    return MarkdownComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar MarkdownPipe = /** @class */ /*@__PURE__*/ (function () {\n    function MarkdownPipe(markdownService, zone) {\n        this.markdownService = markdownService;\n        this.zone = zone;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MarkdownPipe.prototype.transform = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var _this = this;\n            if (typeof value !== 'string') {\n                console.error(\"MarkdownPipe has been invoked with an invalid value type [\" + value + \"]\");\n                return value;\n            }\n            /** @type {?} */\n            var markdown = this.markdownService.compile(value);\n            this.zone.onStable\n                .pipe(first())\n                .subscribe(function () { return _this.markdownService.highlight(); });\n            return markdown;\n        };\n    return MarkdownPipe;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar initialMarkedOptions = {\n    provide: MarkedOptions,\n    useValue: {\n        gfm: true,\n        tables: true,\n        breaks: false,\n        pedantic: false,\n        sanitize: false,\n        smartLists: true,\n        smartypants: false,\n    },\n};\n/** @type {?} */\nvar sharedDeclarations = [\n    LanguagePipe,\n    MarkdownComponent,\n    MarkdownPipe,\n];\nvar MarkdownModule = /** @class */ /*@__PURE__*/ (function () {\n    function MarkdownModule() {\n    }\n    /**\n     * @param {?=} markdownModuleConfig\n     * @return {?}\n     */\n    MarkdownModule.forRoot = /**\n     * @param {?=} markdownModuleConfig\n     * @return {?}\n     */\n        function (markdownModuleConfig) {\n            return {\n                ngModule: MarkdownModule,\n                providers: __spread([\n                    MarkdownService\n                ], (markdownModuleConfig\n                    ? [\n                        markdownModuleConfig.loader || [],\n                        markdownModuleConfig.markedOptions || initialMarkedOptions,\n                    ]\n                    : [initialMarkedOptions])),\n            };\n        };\n    /**\n     * @return {?}\n     */\n    MarkdownModule.forChild = /**\n     * @return {?}\n     */\n        function () {\n            return {\n                ngModule: MarkdownModule,\n            };\n        };\n    return MarkdownModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar MarkedRenderer = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MarkedRenderer, _super);\n    function MarkedRenderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MarkedRenderer;\n}(Renderer));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { LanguagePipe, MarkdownComponent, initialMarkedOptions, MarkdownModule, MarkdownPipe, errorSrcWithoutHttpClient, MarkdownService, MarkedOptions, MarkedRenderer };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",null]}